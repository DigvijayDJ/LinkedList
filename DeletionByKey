import java.io.*; 
  
// Java program to implement 
// a Singly Linked List 
class LinkedList { 
  
    Node head; // head of list 
  
    // Linked list Node. 
    // This inner class is made static 
    // so that main() can access it 
    static class Node { 
  
        int data; 
        Node next; 
  
        // Constructor 
        Node(int d) 
        { 
            data = d; 
            next = null; 
        } 
    } 
  
    // Method to insert a new node 
    public static LinkedList insert(LinkedList list, int data) 
    { 
        // Create a new node with given data 
        Node new_node = new Node(data); 
        new_node.next = null; 
  
        // If the Linked List is empty, 
        // then make the new node as head 
        if (list.head == null) { 
            list.head = new_node; 
        } 
        else { 
            // Else traverse till the last node 
            // and insert the new_node there 
            Node last = list.head; 
            while (last.next != null) { 
                last = last.next; 
            } 
  
            // Insert the new_node at last node 
            last.next = new_node; 
        } 
  
        // Return the list by head 
        return list; 
    } 
  
    // Method to print the LinkedList. 
    public static void printList(LinkedList list) 
    { 
        Node currNode = list.head; 
   
        System.out.print("LinkedList: "); 
   
        // Traverse through the LinkedList 
        while (currNode != null) { 
            // Print the data at current node 
            System.out.print(currNode.data + " "); 
   
            // Go to next node 
            currNode = currNode.next; 
        } 
    } 
   
    // Driver code 
    public static void main(String[] args) 
    { 
        /* Start with the empty list. */
        LinkedList list = new LinkedList(); 
  
        // 
        // ******INSERTION****** 
        // 
  
        // Insert the values 
        list = insert(list, 1); 
        list = insert(list, 2); 
        list = insert(list, 3); 
        list = insert(list, 4); 
        list = insert(list, 5); 
        list = insert(list, 6); 
        list = insert(list, 7); 
        list = insert(list, 8); 
  
        // Print the LinkedList 
        printList(list); 
        
        // Delete node with value 1 
        // In this case the key is ***at head*** 
        DeleteByKey(list, 1); 
  
        // Print the LinkedList 
        printList(list); 
  
        // Delete node with value 4 
        // In this case the key is present ***in the middle*** 
        DeleteByKey(list, 9); 
        
      
  
        // Print the LinkedList 
        printList(list); 
    }
    
    public static LinkedList DeleteByKey(LinkedList list, int key){
    	Node current_node = list.head;
    	Node prev = null;
    	
    	if(current_node != null && current_node.data == key){  //when first node
    		list.head = current_node.next;
    		System.out.println("Node was at head and deleted");
    		return list;
    	}
    	
    	while(current_node != null && current_node.data != key){
    		prev = current_node;
    		current_node = current_node.next;
    		
    	}
    	
    	if(current_node != null){
    		prev.next = current_node.next;
    		System.out.println("Node deleted");
    	}
    	
    	if(current_node == null){
    		System.out.println(key +" node not found");
    	}
    	
    	return list;
    	
    	
    }
    
    
    
    
} 
